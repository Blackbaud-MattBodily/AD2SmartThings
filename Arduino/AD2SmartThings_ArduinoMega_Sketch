 
/** 
 * AD2SmartThings v1.36
 * Couple your Ademco/Honeywell Alarm to your SmartThings Graph using an AD2PI, an Arduino and a ThingShield
 * The Arduino passes all your alarm messages to your SmartThings Graph where they can be processed by the Device Type
 * Use the Device Type to control your alarm or use SmartApps to integrate with other events in your home graph
 *
 *
 ****************************************************************************************************************************
 * Libraries:
 * Timer library was created by Simon Monk as modified by JChristensen  https://github.com/JChristensen/Timer.  Note: if you
 * download the library from the source, you must rename the zip file to "Timer" before importing into the Arduino IDE.
 * 
 * Arduino Mega Library for SmartThings SmartShield can be found at:
 * https://github.com/vassilisv/DSCAlarmSmartThings/tree/master/Arduino/libraries/SmartThingsMega
 *
 * SoftwareSerial library was default library provided with Arduino IDE
 *
 *
 ****************************************************************************************************************************
 *
 * Pin Configuration for AD2Pi to Arduino Mega
 * Use standard jumper wires to connect:
 *  Jumper   AD2PI   Mega
 *    GND    6       GND
 *   3.3V    1       3.3V
 *    RX     10	     19
 *    TX     8	     18
 *
 * Pin Configuration for Arduino Mega to ThingSheild
 * Use standard jumper wires to connect:
 *  Jumper      Mega  ThingShield
 *    RX        17        0
 *    TX        16        1
 *
 *
 * Credit: thanks to github contributor vassilisv for the intial idea and to AlarmDecoder.com for suggesting to use
 * serial out feature of the AD2Pi to connect to the Arduino card.  This project also benefitted imenseley from code 
 * shared by SmartThings contributor  @craig
 * 
 */

#include <SmartThingsMega.h> //special library for Arduino Mega card
#include <Timer.h>

// For added security, the alarm security code is hard coded here
String securityCode = "****"; <--------Replace **** with 4 digit alarm code

#define BUFFER_SIZE 300 // max message length from ADT
 
SmartThingsCallout_t messageCallout;    // call out function forward decalaration
SmartThingsMega smartthing(&Serial2, messageCallout);  // constructor

// set global variables
char buffer[BUFFER_SIZE];
boolean isDebugEnabled=true;  //set to true to debug
int bufferIdx;
String previousStr;
Timer t;
  
void setup()
{
  // initialize AD2 serial stream
  Serial1.begin(115200);                
  bufferIdx = 0;
  
 //debug stuff
  if (isDebugEnabled) {
    Serial.begin(9600);         // setup serial with a baud rate of 9600
    Serial.println("setup..");  // print out 'setup..' on start
  }
  // set SmartThings Shield LED
  smartthing.shieldSetLED(0, 0, 0); // shield led is off
  
  //set device to periodically check in, even if no event has been triggered
  //this is added to reduce excessive logging to the hub
  t.every(10L*60L*1000L, sendUpdate); //send update every 10min
}
 
void loop()
{
  char data;
  // run smartthing logic
  smartthing.run();
  // capture IT-100 messages
  if(Serial1.available() >0) {  //for debug purposes only
    data = Serial1.read();   //for debug purposes only
    if (isDebugEnabled) {
      Serial.print(data);
    }
    // if end of message then send to the cloud
    if (data == '\r' && bufferIdx > 0) { 
      if (isDebugEnabled) {
      Serial.println();
      }
      processAD2();
    }
    // otherwise append data to buffer (ignore \n)
    else if (data != '\n')  {
      buffer[bufferIdx] = data;
      bufferIdx++;
      // check for buffer overruns
      if (bufferIdx >= BUFFER_SIZE) 
      {
        smartthing.send("ER:Buffer overrun"); 
        bufferIdx = 0;
      }
    }
  } 
  t.update(); 
}    

//Process AD2 messages
void processAD2() {
  // create String object
  buffer[bufferIdx] = '\0'; //adds null at end of buffer
  bufferIdx = 0; // reset  counter for next message
  String str(buffer);
 
  //check to see if string message is different
  if (str.equals(previousStr))
  {
   // do nothing
  }
  else
  {
   previousStr = str;     
   int quoteIndex = str.indexOf('"');
   String cmd = str.substring(quoteIndex, str.length());
   if (str.indexOf("!RFX:") >=0 || str.equals("!>null")) {
    // do nothing
   }
   else if(cmd.length() > 0)
   {
    smartthing.send(cmd); 
   }
   else if (str.indexOf("!CONFIG>ADDRESS=") >=0)
   {
    smartthing.send(str.substring(8,18));
    delay (3000);
   }
   else
   {
    smartthing.send(str); 
   }
  }
 }

void messageCallout(String message)
{ 
  String code;
  String cmd;
  if(message.length()>0)
  {
    String code = message.substring(0,6);
    String cmd = message.substring(6);
    Serial.println(message + "is message");
    if (code.equals("[CODE]")) {
      Serial1.println(securityCode + cmd);
      if (isDebugEnabled) {
        Serial.println("Sent Alarm: " + securityCode+cmd);
      }
    }
    if (code.equals("[CONF]")) {
      Serial1.println("C" + cmd);
    }
  }
}
void sendUpdate()
// periodically have the Arduino send the alarm panel status
{
  previousStr="";
}
