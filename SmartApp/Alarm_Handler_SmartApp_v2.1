/**
 *  Alarm Handler v2.1
 *
 *  Copyright 2015 Michael Ritchie
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
 
definition(
    name: "Alarm Handler v2.1",
    namespace: "",
    author: "Michael Ritchie",
    description: "Create virtual devices for each alarm zone",
    category: "Convenience",
    iconUrl: "http://cdn.device-icons.smartthings.com/Home/home3-icn.png",
    iconX2Url: "http://cdn.device-icons.smartthings.com/Home/home3-icn@2x.png",
    iconX3Url: "http://cdn.device-icons.smartthings.com/Home/home3-icn@3x.png")

preferences {
	page(name: "controllerSetup")
    page(name: "zoneSetup")
    page(name: "alertSetup")
}

def controllerSetup() {
    dynamicPage(name: "controllerSetup", title: "Alarm Controller and Devices", nextPage:"zoneSetup", uninstall: true) {
		section("") {
			input "arduino", "capability.alarm", title: "Alarm Controller", required: true, multiple: false
			input "howMany", "number", title: "How many alarm zones do you want to setup devices for?", required: true
		}
        section("Virtual Device Name Prefix (optional.  Example 'Alarm' for Alarm Back Door)"){
            input "namePrefix", "text", title: "Name Prefix", required: false
        }
	}
}

def zoneSetup() {
   	dynamicPage(name: "zoneSetup", title: "Zone Setup", nextPage:"alertSetup", install:false) {
    	for (int i=1;i<=settings.howMany;i++) {
        	section("Virtual Device " + i) {
                input "zone" + i, "number", title: "Zone Number", required: true
                input "name" + i, "string", title: "Zone Name", required: true
                input "typezone" + i, "enum", title: "Zone Type", options:["Simulated Contact Sensor","Simulated Motion Sensor"], required: true
            }
        }    
    }
}

def alertSetup() {
    dynamicPage(name: "alertSetup", title: "Additional Features", install:true) {
        section("Integrate your alarm panel with SmartThings Smart Home Monitor.  By enabling this feature SHM will be armed and disarmed as your alarm panel arms and disarms."){
            input "syncSHM", "bool", title: "Sync with SHM?", defaultValue: false
        }
		section("Receive alarm alert messages via a push notification and/or an SMS message.  By enabling notifications, you will receive notifications for alarm sounding, panel power status changes (on battery, low battery, on AC), and when you try to arm your alarm and it is not in a ready state."){
            input "sendNotification", "bool", title: "Send notifications?", defaultValue: true
            input "phone", "phone", title: "Phone Number (for SMS, optional)", required: false
            input "pushAndPhone", "enum", title: "Both Push and SMS?", required: false, metadata: [values: ["Yes","No"]]
        }
        section("Additional notifications when the state changes on a contact or motion sensor.  This can include virtual devices created by this SmartApp."){
            input "contacts", "capability.contactSensor", title: "Contact Sensors", required: false, multiple: true
            input "motions", "capability.motionSensor", title: "Motion Sensors", required: false, multiple: true
        }
    }    
}

def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def uninstalled() {
	removeChildDevices(getChildDevices())
}

def initialize() {
    // Subscribe to the Arduino and other contacts and motions for notifications
    if (sendNotification) {
    	subscribe(arduino, "alertMsg", alarmMsgHandler)
        if (motions) {
            subscribe(motions, "motion.active", notificationHandler)
        }
        if (contacts) {
            subscribe(contacts, "contact", notificationHandler)
        }
    }
	
	if (syncSHM) {
    	subscribe(arduino, "system", shmHandler)
        
        // Declare/Clear variables to prevent duplicate updates
    	state.previousDeviceValue = ""
    }

    for (int i = 1 ; i <= howMany; i++) {        
        def zoneNumber = "zone" + settings["zone$i"].toString()
        def zoneName = settings["name$i"]
        if (namePrefix) {
        	zoneName = namePrefix + " " + zoneName
        }
        def zoneType = settings["typezone$i"]
        def deviceID = "Alarm_" + zoneNumber
        log.debug "checking device: zoneNumber: ${zoneNumber}, name: ${zoneName}, type: ${zoneType}, deviceID: ${deviceID}"
    	
        def myDevice = getChildDevice(deviceID)
        if (!myDevice) {
            //log.debug("creating device: ${zoneName} deviceID: ${deviceID}")
            def childDevice = addChildDevice("smartthings", zoneType, deviceID, null, [name: "${zoneName}", label: "${zoneName}"])
            //log.debug("created device: ${deviceID}")
        } else {        
            myDevice.name = zoneName
            myDevice.label = zoneName
        }

        if (zoneType == "Simulated Contact Sensor") {
        	//log.debug("Subscribing to ${arduino}, ${zoneNumber}, contactHandler")
            subscribe(arduino, zoneNumber, contactHandler)
        } else if (zoneType == "Simulated Motion Sensor") {
        	//log.debug("Subscribing to ${arduino}, ${zoneNumber}, motionHandler")
            subscribe(arduino, zoneNumber, motionHandler)
        }
    }
}

def motionHandler(evt) {
    def deviceName = evt.name
    def deviceValue = evt.value
    def deviceID = "Alarm_" + deviceName
    //log.debug "deviceName: ${deviceName}, deviceValue: ${deviceValue}, deviceID: '${deviceID}'"
    
    def virtualDevice = getChildDevice(deviceID)
    if (virtualDevice) {
        virtualDevice.sendEvent(name: "motion", value: deviceValue)
    } else {
        log.debug "Could not find child device '${deviceID}'"
    }
}

def contactHandler(evt) {
    def deviceName = evt.name
    def deviceValue = evt.value
    def deviceID = "Alarm_" + deviceName
    //log.debug "deviceName: ${deviceName}, deviceValue: ${deviceValue}, deviceID: ${deviceID}"
    
    def virtualDevice = getChildDevice(deviceID)
    if (virtualDevice) {
    	virtualDevice.sendEvent(name: "contact", value: deviceValue == "active" ? "open" : "closed")
    } else {
        log.debug "Could not find child device ${deviceID}"
    }
}

//Handle alertMsg's from the AD2SmartThings device handler.  Message is set in the DH and this function just sends it.
def alarmMsgHandler(evt) {
    def msg = evt.value

	if (!phone || pushAndPhone != "No") {
		//log.debug "sending push: ${msg}"
		sendPush(msg)
	}
	if (phone) {
		//log.debug "sending SMS, phone: ${phone}, msg: ${msg}"
		sendSms(phone, msg)
	}
}

// Handle notifications for contacts and motions subscribed via the SmartApp preferences
def notificationHandler(evt) {
    def deviceName = evt.displayName
    def deviceValue = evt.value
    def msg = deviceName + " is " + deviceValue

	if (!phone || pushAndPhone != "No") {
		sendPush(msg)
	}
	if (phone) {
		sendSms(phone, msg)
	}
}

// Handle syncing the device handler with Smart Home Monitor
def shmHandler(evt) {
    def deviceName = evt.displayName
    def deviceValue = evt.value
	
	if (deviceValue.indexOf("arming") == -1 && deviceValue != "" && deviceValue != null && state.previousDeviceValue != deviceValue) {
		def shmValue = ""
		
		switch (deviceValue) {
			case "disarmed":
				shmValue = "off"
				break
			case "armedStay":
				shmValue = "stay"
				break
			case "armedAway":
				shmValue = "away"
				break
		}
        state.previousDeviceValue = deviceValue
		sendLocationEvent(name: "alarmSystemStatus", value: shmValue)
        //log.debug "shmValue: ${shmValue}, previousDeviceValue: ${state.previousDeviceValue}"
	}
}

private removeChildDevices(delete) {
	delete.each {deleteChildDevice(it.deviceNetworkId)}
}
